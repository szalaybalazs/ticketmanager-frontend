[{"/Users/balazsszalay/Documents/Git/ticketmanager/frontend/src/index.tsx":"1","/Users/balazsszalay/Documents/Git/ticketmanager/frontend/src/routes/index.tsx":"2","/Users/balazsszalay/Documents/Git/ticketmanager/frontend/src/providers/index.tsx":"3","/Users/balazsszalay/Documents/Git/ticketmanager/frontend/src/reportWebVitals.ts":"4","/Users/balazsszalay/Documents/Git/ticketmanager/frontend/src/layout/Skeleton.tsx":"5","/Users/balazsszalay/Documents/Git/ticketmanager/frontend/src/layout/index.ts":"6","/Users/balazsszalay/Documents/Git/ticketmanager/frontend/src/components/Header.tsx":"7","/Users/balazsszalay/Documents/Git/ticketmanager/frontend/src/components/index.ts":"8","/Users/balazsszalay/Documents/Git/ticketmanager/frontend/src/components/List.tsx":"9","/Users/balazsszalay/Documents/Git/ticketmanager/frontend/src/routes/Sprint.tsx":"10","/Users/balazsszalay/Documents/Git/ticketmanager/frontend/src/components/Sprint.tsx":"11","/Users/balazsszalay/Documents/Git/ticketmanager/frontend/src/core/request.ts":"12","/Users/balazsszalay/Documents/Git/ticketmanager/frontend/src/providers/sprint.ts":"13","/Users/balazsszalay/Documents/Git/ticketmanager/frontend/src/components/Ticket.tsx":"14","/Users/balazsszalay/Documents/Git/ticketmanager/frontend/src/components/ListHeader.tsx":"15"},{"size":521,"mtime":1611657697867,"results":"16","hashOfConfig":"17"},{"size":446,"mtime":1611697548562,"results":"18","hashOfConfig":"19"},{"size":243,"mtime":1611697543618,"results":"20","hashOfConfig":"19"},{"size":425,"mtime":1611588136179,"results":"21","hashOfConfig":"19"},{"size":275,"mtime":1611663813648,"results":"22","hashOfConfig":"19"},{"size":69,"mtime":1611670750413,"results":"23","hashOfConfig":"19"},{"size":565,"mtime":1611698203802,"results":"24","hashOfConfig":"19"},{"size":45,"mtime":1611663792552,"results":"25","hashOfConfig":"19"},{"size":1018,"mtime":1611699790871,"results":"26","hashOfConfig":"19"},{"size":549,"mtime":1611735778570,"results":"27","hashOfConfig":"19"},{"size":990,"mtime":1611735761602,"results":"28","hashOfConfig":"19"},{"size":819,"mtime":1611671978271,"results":"29","hashOfConfig":"19"},{"size":5028,"mtime":1611738762380,"results":"30","hashOfConfig":"19"},{"size":728,"mtime":1611738926740,"results":"31","hashOfConfig":"19"},{"size":755,"mtime":1611678906585,"results":"32","hashOfConfig":"19"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1tdk1vl",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"l85083",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/balazsszalay/Documents/Git/ticketmanager/frontend/src/index.tsx",[],"/Users/balazsszalay/Documents/Git/ticketmanager/frontend/src/routes/index.tsx",[],"/Users/balazsszalay/Documents/Git/ticketmanager/frontend/src/providers/index.tsx",[],"/Users/balazsszalay/Documents/Git/ticketmanager/frontend/src/reportWebVitals.ts",["65"],"import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/Users/balazsszalay/Documents/Git/ticketmanager/frontend/src/layout/Skeleton.tsx",[],"/Users/balazsszalay/Documents/Git/ticketmanager/frontend/src/layout/index.ts",[],"/Users/balazsszalay/Documents/Git/ticketmanager/frontend/src/components/Header.tsx",[],"/Users/balazsszalay/Documents/Git/ticketmanager/frontend/src/components/index.ts",[],"/Users/balazsszalay/Documents/Git/ticketmanager/frontend/src/components/List.tsx",[],"/Users/balazsszalay/Documents/Git/ticketmanager/frontend/src/routes/Sprint.tsx",[],"/Users/balazsszalay/Documents/Git/ticketmanager/frontend/src/components/Sprint.tsx",[],"/Users/balazsszalay/Documents/Git/ticketmanager/frontend/src/core/request.ts",["66","67"],"/Users/balazsszalay/Documents/Git/ticketmanager/frontend/src/providers/sprint.ts",["68","69","70","71","72","73","74","75"],"import { useEffect, useState } from 'react';\nimport { iSprint } from 'types/sprint';\nimport { iTicket, status } from 'types/ticket';\nimport { iBoard } from 'types/board';\nimport { request } from 'core';\nimport { DraggableLocation } from 'react-beautiful-dnd';\n\ninterface iUseSprint {\n  sprint: iSprint | null\n  board: iBoard | null\n  tickets: iTicket[]\n  loading: boolean\n  error: Error | string | null\n  updateTicket: (ticketId: string, destionation: DraggableLocation | undefined, source: DraggableLocation | undefined) => void\n}\n\ninterface iTicketChange {\n  id: string,\n  change: any\n}\n\ninterface iTicketList {\n  'TODO': iTicket[]\n  'INPROGRESS': iTicket[]\n  'COMPLETED': iTicket[]\n}\n\n/**\n * Sort ticket list and map statuses\n * @param tickets ticketlist\n */\nconst sortTickets = (tickets: iTicket[], status?: status): iTicket[] => {\n  const mapping = {\n    'TODO': 0,\n    INPROGRESS: 0,\n    COMPLETED: 0,\n    BACKLOG: 0\n  };\n  return [...tickets].sort((a, b) => a.index - b.index).map((ticket: iTicket) => {\n    ticket.index = mapping[ticket.status || 'BACKLOG']++;\n    return ticket;\n  }).filter(ticket => !status || ticket.status === status);\n};\n\n/**\n * MapTicket indexes\n * @param tickets ticketlist\n */\nconst mapTickets = (tickets: iTicket[]): any => tickets\n  .map((ticket, index: number) => ({ ...ticket, index }))\n  .reduce((prev, ticket: iTicket) => ({ ...prev, [ticket.id]: ticket }), {});\n\nconst STATUSES: status[] = ['BACKLOG', 'TODO', 'INPROGRESS', 'COMPLETED'];\n\n/**\n * Retreiving sprint information\n * @param boardId the board's identifier - shortname\n * @param sprintId the sprits identifier\n */\nexport const useSprint = (boardId = 'default', sprintId = 'current'): iUseSprint => {\n  const [sprint, setSprint] = useState<iSprint | null>(null);\n  const [tickets, setTickets] = useState<iTicket[]>([]);\n  const [board, setBoard] = useState<iBoard | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<Error | string | null>(null);\n  \n  // ====================\n  // Methods\n  // ====================\n\n  /**\n   * Loading sprint\n   */\n  const _handleSprintLoad = async () => {\n    setLoading(true);\n    try {\n      const { data: { sprint, tickets, board } } = await request(`/sprint/${boardId}/${sprintId}`);\n\n      \n      setTickets(sortTickets(tickets));\n\n      setBoard(board);\n      setSprint(sprint);\n    } catch (error: any) {\n      console.log(error);\n      setError(error.message);\n    }\n    setLoading(false);\n  };\n\n  /**\n   * Saving updated ticket\n   * @param ticketId the id of the ticket\n   * @param change the change in the ticket - JSON\n   */\n  const _handleTicketSave = (ticketId: string, change: any) => request(`/ticket/${board?.shortname}/${ticketId}`, {\n    method: 'PATCH',\n    body: change\n  });\n\n  /**\n   * Updating ticket order and status\n   * @param ticketId the id of the ticket\n   * @param destination drag destination\n   * @param source drag source\n   */\n  const _handleTicketUpdate = (ticketId: string, destination: DraggableLocation | undefined, source: DraggableLocation | undefined) => {\n    if (!destination || !source) return;\n    \n    // Copying ticket list\n    const _tickets = [...tickets];\n    \n    // Generating ticket map\n    const ticketMap: any = {\n      'TODO': sortTickets(_tickets, 'TODO'),\n      'INPROGRESS': sortTickets(_tickets, 'INPROGRESS'),\n      'COMPLETED': sortTickets(_tickets, 'COMPLETED'),\n    };\n\n    // Getting ticket index in source array\n    const index = ticketMap[source.droppableId].findIndex((ticket: iTicket) => ticket.id === ticketId);\n    \n    // Moving ticket to new status\n    const [ticket] = ticketMap[source.droppableId].splice(index, 1);\n    ticketMap[destination.droppableId].splice(destination.index, 0, { ...ticket, status: destination.droppableId });\n\n    // Generating changes\n    const [sources, destinations] = [ticketMap[source.droppableId], ticketMap[destination.droppableId]].map(mapTickets);\n\n    // Generating updated tickets\n    const updatedTickets = _tickets.map(ticket => sources[ticket.id] || destinations[ticket.id] || ticket);\n\n    // Generating chaned ticketlist\n    const changes: iTicketChange[] = updatedTickets.map((ticket: iTicket) => {\n      const prevTicket = tickets.find(_ticket => _ticket.id === ticket.id);\n      const change: any = {};\n\n      // Generating change\n      if (prevTicket && prevTicket.status !== ticket.status) change.status = ticket.status;\n      if (prevTicket && prevTicket.index !== ticket.index) change.index = ticket.index;\n      \n      return { id: ticket.id, change };\n    }).filter(ticket => Object.keys(ticket.change).length > 0);\n\n    // Saving changes\n    changes.forEach(({ id, change }) => _handleTicketSave(id, change));\n    \n    // Updating ticket list\n    setTickets(updatedTickets);\n  };\n  \n  // ====================\n  // Lifecycle\n  // ====================\n  useEffect(() => {\n    _handleSprintLoad();\n  }, [boardId, sprintId]);\n\n  return { sprint, tickets, board, loading, error, updateTicket: _handleTicketUpdate };\n};\n","/Users/balazsszalay/Documents/Git/ticketmanager/frontend/src/components/Ticket.tsx",[],"/Users/balazsszalay/Documents/Git/ticketmanager/frontend/src/components/ListHeader.tsx",[],{"ruleId":"76","severity":1,"message":"77","line":3,"column":25,"nodeType":"78","messageId":"79","endLine":3,"endColumn":57},{"ruleId":"80","severity":1,"message":"81","line":3,"column":10,"nodeType":"82","messageId":"83","endLine":3,"endColumn":13,"suggestions":"84"},{"ruleId":"80","severity":1,"message":"81","line":7,"column":9,"nodeType":"82","messageId":"83","endLine":7,"endColumn":12,"suggestions":"85"},{"ruleId":"80","severity":1,"message":"81","line":19,"column":11,"nodeType":"82","messageId":"83","endLine":19,"endColumn":14,"suggestions":"86"},{"ruleId":"87","severity":1,"message":"88","line":22,"column":11,"nodeType":"89","messageId":"90","endLine":22,"endColumn":22},{"ruleId":"80","severity":1,"message":"81","line":49,"column":42,"nodeType":"82","messageId":"83","endLine":49,"endColumn":45,"suggestions":"91"},{"ruleId":"87","severity":1,"message":"92","line":53,"column":7,"nodeType":"89","messageId":"90","endLine":53,"endColumn":25},{"ruleId":"80","severity":1,"message":"81","line":84,"column":21,"nodeType":"82","messageId":"83","endLine":84,"endColumn":24,"suggestions":"93"},{"ruleId":"80","severity":1,"message":"81","line":96,"column":56,"nodeType":"82","messageId":"83","endLine":96,"endColumn":59,"suggestions":"94"},{"ruleId":"80","severity":1,"message":"81","line":114,"column":22,"nodeType":"82","messageId":"83","endLine":114,"endColumn":25,"suggestions":"95"},{"ruleId":"80","severity":1,"message":"81","line":136,"column":21,"nodeType":"82","messageId":"83","endLine":136,"endColumn":24,"suggestions":"96"},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["97","98"],["99","100"],["101","102"],"@typescript-eslint/no-unused-vars","'iTicketList' is defined but never used.","Identifier","unusedVar",["103","104"],"'STATUSES' is assigned a value but never used.",["105","106"],["107","108"],["109","110"],["111","112"],{"messageId":"113","fix":"114","desc":"115"},{"messageId":"116","fix":"117","desc":"118"},{"messageId":"113","fix":"119","desc":"115"},{"messageId":"116","fix":"120","desc":"118"},{"messageId":"113","fix":"121","desc":"115"},{"messageId":"116","fix":"122","desc":"118"},{"messageId":"113","fix":"123","desc":"115"},{"messageId":"116","fix":"124","desc":"118"},{"messageId":"113","fix":"125","desc":"115"},{"messageId":"116","fix":"126","desc":"118"},{"messageId":"113","fix":"127","desc":"115"},{"messageId":"116","fix":"128","desc":"118"},{"messageId":"113","fix":"129","desc":"115"},{"messageId":"116","fix":"130","desc":"118"},{"messageId":"113","fix":"131","desc":"115"},{"messageId":"116","fix":"132","desc":"118"},"suggestUnknown",{"range":"133","text":"134"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"133","text":"135"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"136","text":"134"},{"range":"136","text":"135"},{"range":"137","text":"134"},{"range":"137","text":"135"},{"range":"138","text":"134"},{"range":"138","text":"135"},{"range":"139","text":"134"},{"range":"139","text":"135"},{"range":"140","text":"134"},{"range":"140","text":"135"},{"range":"141","text":"134"},{"range":"141","text":"135"},{"range":"142","text":"134"},{"range":"142","text":"135"},[85,88],"unknown","never",[146,149],[583,586],[1251,1254],[2394,2397],[2680,2683],[3250,3253],[4300,4303]]